/**
 * 1.0.0  : release
 * 1.0.1  : Fragmentを強制的に子まで呼び出している不具合を修正
 * 1.0.x  : Circle CIに移行
 * 1.1.x  : LifecycleStateをラップする構造に変更
 * 1.2.x  : キャンセルチェックを複数登録できるように挙動変更
 * 2.0.x  : クラス命名をアップデート
 * 2.1.x  : CallbackQueueの現在のステートを取得できるように修正, Chain Taskを削除
 * 2.2.x  : bintray対応
 */
def ARTIFACT_VERSION = "2.2"
def REPOSITORY_NAME = "maven"
def BINTRAY_LICENSES = ["MIT"]
def BINTRAY_LABELS = ["android"]
def BINTRAY_API_KEY = System.env.BINTRAY_API_KEY
def BINTRAY_GPG_PASS = System.env.BINTRAY_GPG_PASS

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://dl.bintray.com/eaglesakura/maven/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
        classpath 'me.tatarka:gradle-retrolambda:3.5.0' // support Lambda
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

repositories {
    mavenCentral()
    maven { url "https://dl.bintray.com/eaglesakura/maven/" }
}

apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda' /* Android Lambda Support */
group = "com.eaglesakura"
version = ARTIFACT_VERSION + getArtifactVersionSuffix()

// Local or maven
if (!hasProperty("EGLIBRARY_COMPILE_LOCAL")) {
    ext.EGLIBRARY_COMPILE_LOCAL = false
}

dependencies {
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'io.reactivex:rxjava:1.1.10'
    compile "com.android.support:support-annotations:25.3.0"
    compile "com.android.support:support-v4:25.3.0"

    if (EGLIBRARY_COMPILE_LOCAL) {
        testCompile project(":eglibrary:android-unittest-support")

        androidTestCompile project(":eglibrary:android-commons")
        androidTestCompile project(":eglibrary:android-devicetest-support")
    } else {
        testCompile "com.eaglesakura:android-unittest-support:1.4.207"

        androidTestCompile "com.eaglesakura:android-commons:2.1.3"
        androidTestCompile "com.eaglesakura:android-devicetest-support:2.1.272"
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 25
        consumerProguardFiles 'proguard-rules.pro'

        // Device Test
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"    // JUnit4
    }

    lintOptions {
        disable "NewApi"
    }
}

/**
 * UnitTest & retro lambda
 */
tasks.withType(Test) {
    project.tasks
            .findAll {
        task -> (task.name ==~ /compile.*?TestJava.*?/)
    }
    .each { task ->
        task.doFirst {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

android.libraryVariants.all { variant ->
    if (!"release".equals(variant.name) || "".equals(ARTIFACT_VERSION)) {
        return;
    }

    task("javadoc", type: Javadoc) {
        title = "${file(".").name} ver ${ARTIFACT_VERSION}"
        description "Generates Android Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar) + files("build/intermediates/classes/${variant.name}/")
        options.links("http://docs.oracle.com/javase/8/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/*Dao.java' /* ignore greenDAO */
        exclude '**/DaoMaster.java' /* ignore greenDAO */
        exclude '**/DaoSession.java' /* ignore greenDAO */
        exclude '**/R.java' /* ignore greenDAO */


        options.addStringOption('Xdoclint:none', '-quiet')
        options.encoding = "UTF-8"
        project.configure(options) {
            memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
            charSet = "UTF-8"
        }
    }


    task("javadocJar", type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}

/**
 * バージョンを取得する
 * CircleCIの場合、バージョン末尾にビルド番号を付与する
 */
def getArtifactVersionSuffix() {
    if (System.env.CIRCLE_BUILD_NUM != null) {
        // CircleCIのバージョンが指定されているので、そちらを利用する
        return ".${System.env.CIRCLE_BUILD_NUM}"
    } else {
        return ".snapshot"
    }
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

bintray {
    user = 'eaglesakura'
    key = BINTRAY_API_KEY
    pkg {
        repo = REPOSITORY_NAME
        name = file(".").absoluteFile.name
        licenses = BINTRAY_LICENSES
        labels = BINTRAY_LABELS
        issueTrackerUrl = "https://github.com/eaglesakura/${file(".").absoluteFile.name}/issues"
        vcsUrl = "https://github.com/eaglesakura/${file(".").absoluteFile.name}"
        version {
            name = project.version
            released = new Date()
            gpg {
                sign = true
                passphrase = BINTRAY_GPG_PASS
            }
        }
    }
    configurations = ['archives']
}
